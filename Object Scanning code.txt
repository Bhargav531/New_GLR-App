privateclassInitVuforiaextendsAsync<Void,Integer,Boolean>
{

privateintmScanvalue=-1;

protectedBooleandoInBackground(Void.params)
{

synchronized(mShutdownLock)
{

Vuforia.setInitParameters(mActivity, mVuforiaFlags, "ad57f7d0d29d41369bd421227b27dc8e");

do
{
mScanValue=Vuforia.init();
publishProgress(mScanValue);
}
while(!isCanceled()&&mScanValue>=0&&mScanValue<100);

return(mScanValue>0);
}
}
publicbooleanvuforiaData()

TrackerManagertManager=TrackerManager.getInstance(); ObjectTrackerobjectTracker=(ObjectTracker)tManager
.getTracker(ObjectTracker.getClassType());
if(objectTracker==nul)
returnfalse;

if(mCurentDataset==nul) mCurentDataset=objectTracker.createDataSet();

if(mCurentDataset==nul)
returnfalse;

if(!mCurrentDataset.load("ObjectRecognition/rigidBodyTarget.xml",
STORAGE_TYPE.STORAGE_APPRESOURCE))
returnfalse;

if(!objectTracker.activateDataSet(mCurrentDataset))
returnfalse;

intnumTrackables=mCurentDataset.getNumTrackables(); for(intcount=0;count<numTrackables;count++) {

Trackabletrackable=mCurentDataset.getTrackable(count); if(isExtendedTrackingActive()) {

trackable.startExtendedTracking();
}
 

Stringname="CurentDataset:"+trackable.getName(); trackable.setUserData(name); Log.d(LOGTAG,"UserData:Setthefolowinguserdata"
 
+(String)trackable.getUserData());
}

returntrue;
}

privatevoidscanvuforiaFrame()
{

GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT|GLES20.GL_DEPTH_BUFFER_BIT);

Statestate=mRenderer.begin();
mRenderer.drawVideoBackground();

GLES20.glEnable(GLES20.GL_DEPTH_TEST);
GLES20.glEnable(GLES20.GL_BLEND);

GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);

if	(Renderer.getInstance().getVideoBackgroundConfig().getReflection()	==
VIDEO_BACKGROUND_REFLECTION.VIDEO_BACKGROUND_REFLECTION_ON)
GLES20.glFrontFace(GLES20.GL_CCW);


for(intaIdx=0;aIdx<state.getNumTrackableResults();aIdx++)
{

TrackableResultresult=state.getTrackableResult(aIdx); Trackabletrackable=result.getTrackable(); printUserData(trackable);

if(!result.isOfType(ObjectTargetResult.getClassType()))
continue;

ObjectTargetobjectTarget=(ObjectTarget)trackable;

Matrix44FmodelViewMatrix_Vuforia=Tool

.convertPose2GLMatrix(result.getPose()); float[]modelViewMatrix=modelViewMatrix_Vuforia.getData();


float[]modelViewProjection=newfloat[16];

float[]objectSize=objectTarget.getSize().getData();

Matrix.translateM(modelViewMatrix,0,objectSize[0]/2,objectSize[1]/2,
objectSize[2]/2);

Matrix.scaleM(modelViewMatrix,0,objectSize[0],
objectSize[1],objectSize[2]);

Matrix.multiplyMM(modelViewProjection,0,vuforiaAppSession
.getProjectionMatrix().getData(),0,modelViewMatrix,0);


GLES20.glUseProgram(shaderProgramID);
 

GLES20.glVertexAtribPointer(vertexHandle,3,GLES20.GL_FLOAT, false,0,mCubeObject.getVertices());
 
GLES20.glUniform1f(opacityHandle,0.3f);
GLES20.glUniform3f(colorHandle,0.0f,0.0f,0.0f);

GLES20.glEnableVertexAtribAray(vertexHandle);


GLES20.glUniformMatrix4fv(mvpMatrixHandle,1,false,
modelViewProjection,0);


GLES20.glDrawElements(GLES20.GL_TRIANGLES,
mCubeObject.getNumObjectIndex(),GLES20.GL_UNSIGNED_SHORT,
mCubeObject.getIndices());
GLES20.glDisableVertexAtribAray(vertexHandle);

SampleUtils.checkGLEror("RenderFrame");

}

GLES20.glDisable(GLES20.GL_DEPTH_TEST);
GLES20.glDisable(GLES20.GL_BLEND);

mRenderer.end();
}
